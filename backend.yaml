- name: configure backend server
  hosts: backend
  become: yes
  tasks:
  - name: disable nodejs
    ansible.builtin.command: dnf module disable nodejs -y
  - name: enable enable nodejs:20
    ansible.builtin.command: dnf module enable nodejs:20 -y
  - name: installing nodejs
    ansible.builtin.dnf:
      name: "{{ item }}"
      state: latest
    loop:
    - nodejs
    - mysql
  - name: create expense user
    ansible.builtin.user:
      name: expense
  - name: create app directory
    ansible.builtin.file:
      path: /app
      state: directory
  - name: downloading the backend code
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip
  - name: unzipping the code
    ansible.builtin.unarchive:
      src: /tmp/backend.zip
      dest: /app
      remote_src: yes
  - name: install dependencies
    ansible.builtin.command: npm install
    args:
      chdir: /app

  - name: copy backend service
    ansible.builtin.copy:
      src: backend.service
      dest: /etc/systemd/system/backend.service

  - name: import data into mysql
    community.mysql.mysql_db:
      # login_user: root
      # login_password: "{{ login_password }}"
      # login_host: "{{ login_host }}"
      target: /app/schema/backend.sql
      state: import
      name: all

  - name: daemon reload
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: start and enable backend service
    ansible.builtin.service:
      name: backend
      state: started
      enabled: yes

  - name: load data into mysql
    ansible.builtin.command: mysql -h db.malluru.online -uroot-pExpenseApp@1 < /app/schema/backend.sql
  - name: restart backend service
    ansible.builtin.service:
      name: backend
      state: restarted
      
